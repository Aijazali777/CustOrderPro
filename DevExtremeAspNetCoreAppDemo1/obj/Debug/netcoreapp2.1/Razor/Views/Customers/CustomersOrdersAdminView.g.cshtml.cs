#pragma checksum "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "43d6a969c5a6a2f055146c021cc112b7c80ca944"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Customers_CustomersOrdersAdminView), @"mvc.1.0.view", @"/Views/Customers/CustomersOrdersAdminView.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Customers/CustomersOrdersAdminView.cshtml", typeof(AspNetCore.Views_Customers_CustomersOrdersAdminView))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\_ViewImports.cshtml"
using CustOrderPro;

#line default
#line hidden
#line 2 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\_ViewImports.cshtml"
using CustOrderPro.Models;

#line default
#line hidden
#line 3 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#line 4 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"43d6a969c5a6a2f055146c021cc112b7c80ca944", @"/Views/Customers/CustomersOrdersAdminView.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a2d826b5fe07b309d4313369e85e5cf41a0175f9", @"/Views/_ViewImports.cshtml")]
    public class Views_Customers_CustomersOrdersAdminView : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<OrderReceipt>>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(77, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
  
    var user = await userManager.GetUserAsync(User);
    var orderReceiptsJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
    ViewData["Title"] = "Customers&Orders";

#line default
#line hidden
            BeginContext(266, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(268, 125, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ce4feca4dc704bf99ef202600b007c09", async() => {
                BeginContext(274, 112, true);
                WriteLiteral("\r\n    <script src=\"https://cdn.jsdelivr.net/npm/google-libphonenumber@3.2.20/dist/libphonenumber.js\"></script>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(393, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(395, 14289, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "08e1df2867cc413e95ea73cf33b5a341", async() => {
                BeginContext(401, 21, true);
                WriteLiteral("\r\n    <div>\r\n        ");
                EndContext();
                BeginContext(424, 3871, false);
#line 15 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
    Write(Html.DevExtreme().DataGrid<Customer>()
                    .ID("CustomerGrid")
                    .DataSource(ds => ds.Mvc()
                        .Controller("Customers")
                        .LoadAction("Get")
                        .InsertAction("Post")
                        .UpdateAction("Put")
                        .DeleteAction("Delete")
                        .Key("Id")
                    )
                    .Height(new JS("CustomerGridHeight"))
                    .RemoteOperations(true)
                    .ShowRowLines(true)
                    .RowAlternationEnabled(true)
                    .AllowColumnResizing(true)
                    .FilterPanel(f => f.Visible(true))
                    .FilterBuilderPopup(p => p
                        .Position(pos => pos
                            .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                            .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                            .Offset(0, 10)
                        )
                        .Width(400)
                        .Height(400)
                    )
                    .Pager(p => p
                        .ShowNavigationButtons(true)
                        .Visible(true)
                        .DisplayMode(GridPagerDisplayMode.Full)
                        .ShowInfo(true)
                    )
                    .Selection(s => s
                        .Mode(SelectionMode.Single)
                    )
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.Name).ValidationRules(rules =>
                        {
                            rules.AddRequired();
                        });
                        columns.AddFor(m => m.Gender).Lookup(lookup => lookup
                                    .DataSource(new[] {
                                        new { Value = "Male", Text = "Male" },
                                        new { Value = "Female", Text = "Female" },
                                        new { Value = "Other", Text = "Other" }
                                    })
                                    .ValueExpr("Value")
                                    .DisplayExpr("Text")
                                );
                        columns.AddFor(m => m.Email).ValidationRules(rules =>
                        {
                            rules.AddEmail();
                            rules.AddRequired();
                        });
                        columns.AddFor(m => m.PhoneNumber).ValidationRules(rules =>
                        {
                            rules.AddRequired();
                            rules.AddCustom()
                                .ValidationCallback("validatePhoneNumber")
                                .Message("Invalid phone number");
                        });
                        columns.AddFor(m => m.Address).ValidationRules(rules =>
                        {
                            rules.AddRequired();
                        });
                        columns.AddFor(m => m.City).ValidationRules(rules =>
                        {
                            rules.AddRequired();
                        });
                        columns.AddFor(m => m.Country).ValidationRules(rules =>
                        {
                            rules.AddRequired();
                        });
                    })
                    .OnSelectionChanged("onCustomerGridSelectionChanged")
                    .Paging(p => p.PageSize(12))
                    .Editing(e => e
                        .AllowAdding(true)
                        .AllowUpdating(true)
                        .AllowDeleting(true)
                    )
        );

#line default
#line hidden
                EndContext();
                BeginContext(4296, 12, true);
                WriteLiteral("\r\n\r\n        ");
                EndContext();
                BeginContext(4310, 333, false);
#line 98 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
    Write(Html.DevExtreme().Accordion()
                    .ID("AccordionContainer")
                    .Items(it =>
                    {
                        it.Add().Title("Orders").Template(new TemplateName("OrderAccordianTemplate"));
                    }
                    )
                    .Collapsible(true)
        );

#line default
#line hidden
                EndContext();
                BeginContext(4644, 4, true);
                WriteLiteral("\r\n\r\n");
                EndContext();
#line 108 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
         using (Html.DevExtreme().NamedTemplate("OrderAccordianTemplate"))
        {

#line default
#line hidden
                BeginContext(4735, 119, true);
                WriteLiteral("            <div class=\"row\">\r\n                <div class=\"col-6\">\r\n                    <div>\r\n                        ");
                EndContext();
                BeginContext(4856, 377, false);
#line 113 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
                    Write(Html.DevExtreme().TabPanel()
                                    .ID("ProductOrderTabPanel")
                                    .Items(tp =>
                                    {
                                        tp.Add().Title("Product Orders").Template(new TemplateName("ProductOrderTabTemplate"));
                                    })
                        );

#line default
#line hidden
                EndContext();
                BeginContext(5234, 142, true);
                WriteLiteral("\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-6\">\r\n                    <div>\r\n                        ");
                EndContext();
                BeginContext(5378, 373, false);
#line 124 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
                    Write(Html.DevExtreme().TabPanel()
                                    .ID("CryptoOrderTabPanel")
                                    .Items(tp =>
                                    {
                                        tp.Add().Title("Crypto Orders").Template(new TemplateName("CrytoOrderTabTemplate"));
                                    })
                        );

#line default
#line hidden
                EndContext();
                BeginContext(5752, 74, true);
                WriteLiteral("\r\n                    </div>\r\n                </div>\r\n            </div>\r\n");
                EndContext();
#line 134 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
        }

#line default
#line hidden
                BeginContext(5837, 2, true);
                WriteLiteral("\r\n");
                EndContext();
#line 136 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
         using (Html.DevExtreme().NamedTemplate("ProductOrderTabTemplate"))
        {

#line default
#line hidden
                BeginContext(5927, 35, true);
                WriteLiteral("            <div>\r\n                ");
                EndContext();
                BeginContext(5964, 3315, false);
#line 139 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
            Write(Html.DevExtreme().DataGrid<Order>()
                            .ID("OrderGrid")
                            .DataSource(ds => ds.Mvc()
                                .Controller("Orders")
                                .LoadParams(new { CustomerId = new JS("GetCustomerId")})
                                .LoadAction("Get")
                                .InsertAction("Post")
                                .UpdateAction("Put")
                                .DeleteAction("Delete")
                                .Key("OrderId")
                            )
                            .Selection(s => s
                                .Mode(SelectionMode.Single)
                            )
                            .RemoteOperations(true)
                            .ShowRowLines(true)
                            .RowAlternationEnabled(true)
                            .AllowColumnResizing(true)
                            .Height(new JS("ProductOrderGridHeight"))
                            .Columns(columns =>
                            {
                                columns.AddFor(m => m.CustomerId).AllowEditing(false).Caption("CustomerName").Lookup(lookup => lookup
                                                        .DataSource(ds => ds.WebApi().Controller("Orders").LoadAction("CustomersLookup").Key("Value"))
                                                        .ValueExpr("Value")
                                                        .DisplayExpr("Text")
                                                    );
                                columns.AddFor(m => m.NumberOfItems);
                                columns.AddFor(m => m.TotalPrice);
                                columns.AddFor(m => m.PaymentStatus).Lookup(lookup => lookup
                                    .DataSource(new[] {
                                    new { Value = "Paid", Text = "Paid" },
                                    new { Value = "Pending", Text = "Pending" }
                                    })
                                    .ValueExpr("Value")
                                    .DisplayExpr("Text")
                                );
                                columns.Add().Type(GridCommandColumnType.Buttons)
                                .Width(170)
                                .Buttons(buttons =>
                                {
                                    buttons.Add().Name(GridColumnButtonName.Edit);
                                    buttons.Add().Name(GridColumnButtonName.Delete);
                                    buttons.Add()
                                    .Name("View")
                                    .Text("Receipt")
                                    .OnClick("showReceipt");

                                });
                            })
                            .HeaderFilter(f => f.Visible(true))
                            .Editing(e => e
                                .AllowAdding(true)
                                .AllowUpdating(true)
                                .AllowDeleting(true)
                            )
                            .OnInitNewRow("function(e) { e.data.CustomerId = GetCustomerId(); }")
                );

#line default
#line hidden
                EndContext();
                BeginContext(9280, 22, true);
                WriteLiteral("\r\n            </div>\r\n");
                EndContext();
#line 197 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
        }

#line default
#line hidden
                BeginContext(9313, 2, true);
                WriteLiteral("\r\n");
                EndContext();
#line 199 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
         using (Html.DevExtreme().NamedTemplate("CrytoOrderTabTemplate"))
        {

#line default
#line hidden
                BeginContext(9401, 35, true);
                WriteLiteral("            <div>\r\n                ");
                EndContext();
                BeginContext(9438, 2644, false);
#line 202 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
            Write(Html.DevExtreme().DataGrid<CryptoOrder>()
                            .ID("CryptoOrderGrid")
                            .DataSource(ds => ds.Mvc()
                                .Controller("CryptoOrders")
                                .LoadParams(new { CustomerId = new JS("GetCustomerId") })
                                .LoadAction("Get")
                                .InsertAction("Post")
                                .UpdateAction("Put")
                                .DeleteAction("Delete")
                                .Key("CryptoId")
                            )
                            .Selection(s => s
                                .Mode(SelectionMode.Single)
                            )
                            .RemoteOperations(true)
                            .ShowRowLines(true)
                            .ShowBorders(true)
                            .RowAlternationEnabled(true)
                            .AllowColumnResizing(true)
                            .Height(new JS("CrytpoOrderGridHeight"))
                            .Columns(columns =>
                            {
                                columns.AddFor(m => m.CustomerId).AllowEditing(false).Caption("CustomerName").Lookup(lookup => lookup
                                    .DataSource(ds => ds.WebApi().Controller("CryptoOrders").LoadAction("CustomersLookup").Key("Value"))
                                    .ValueExpr("Value")
                                    .DisplayExpr("Text")
                                );

                                columns.AddFor(m => m.Symbol).Lookup(lookup => lookup
                                    .DataSource(new[] {
                                    new { Value = "BTC", Text = "BTC" },
                                    new { Value = "ETH", Text = "ETH" }
                                    })
                                    .ValueExpr("Value")
                                    .DisplayExpr("Text")
                                );

                                columns.AddFor(m => m.Quantity);

                                columns.AddFor(m => m.Price);
                            })
                            .HeaderFilter(f => f.Visible(true))
                            .Editing(e => e
                                .AllowAdding(true)
                                .AllowUpdating(true)
                                .AllowDeleting(true)
                            )
                            .OnInitNewRow("function(e) { e.data.CustomerId = GetCustomerId(); }")
                );

#line default
#line hidden
                EndContext();
                BeginContext(12083, 22, true);
                WriteLiteral("\r\n            </div>\r\n");
                EndContext();
#line 252 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
        }

#line default
#line hidden
                BeginContext(12116, 335, true);
                WriteLiteral(@"    </div>

    <div id=""orderReceiptPopup""></div>

    <script>
        var currentSelectedCustomerId = 0;
        var CustomerGridHeight = $(window).height() * .50;
        var ProductOrderGridHeight = $(window).height() * .355;
        var CrytpoOrderGridHeight = $(window).height() * .355;
        var orderReceiptsData = ");
                EndContext();
                BeginContext(12452, 27, false);
#line 262 "C:\Users\aaijaz\source\repos\DevExtremeAspNetCoreAppDemo1\DevExtremeAspNetCoreAppDemo1\Views\Customers\CustomersOrdersAdminView.cshtml"
                           Write(Html.Raw(orderReceiptsJson));

#line default
#line hidden
                EndContext();
                BeginContext(12479, 2198, true);
                WriteLiteral(@";

        function GetCustomerId() {
            return currentSelectedCustomerId;
        }

        function onCustomerGridSelectionChanged(e) {
            var data = e.selectedRowsData[0];
            if (data) {
                currentSelectedCustomerId = data.Id;
                reloadOrderGrid();
            }
        }

        function reloadOrderGrid() {
            var orderDataGridInstance = $(""#OrderGrid"").dxDataGrid(""instance"");
            var cryptoOrderGridInstance = $(""#CryptoOrderGrid"").dxDataGrid(""instance"");

            if (orderDataGridInstance && cryptoOrderGridInstance) {
                orderDataGridInstance.getDataSource().reload();
                cryptoOrderGridInstance.getDataSource().reload();
            }
        }

        function showReceipt(e) {
            var orderId = e.row.data.OrderId;
            var orderReceipt = orderReceiptsData.find(or => or.OrderId === orderId);
            if (!orderReceipt) {
                console.error(""Order r");
                WriteLiteral(@"eceipt not found"");
                return;
            }

            var orderDetailsHtml = `
                    <div>
                        <p>${orderReceipt.ReceiptDetails}</p>
                    </div>
                `;
            $(""#orderReceiptPopup"").dxPopup({
                title: ""Order Receipt"",
                contentTemplate: function (contentElement) {
                    contentElement.append(orderDetailsHtml);
                },
                width: 400,
                height: 200,
                visible: true,
                position: {
                    my: 'right top',
                    at: 'right top',
                    of: '#OrderGrid'
                }
            }).dxPopup(""instance"").show();
        }

        function validatePhoneNumber(params) {
            const phoneNumberUtil = libphonenumber.PhoneNumberUtil.getInstance();
            try {
                const phoneNumberProto = phoneNumberUtil.parse(params.value);
                re");
                WriteLiteral("turn phoneNumberUtil.isValidNumber(phoneNumberProto);\n            } catch (e) {\n                return false;\n            }\n        }\r\n    </script>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(14684, 2, true);
            WriteLiteral("\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public UserManager<Customer> userManager { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<OrderReceipt>> Html { get; private set; }
    }
}
#pragma warning restore 1591
